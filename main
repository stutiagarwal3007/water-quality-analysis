
# Water Quality Analysis Using Random Forest

## Objective
To analyze water quality data and predict the probability of water being drinkable using Random Forest classification in a Google Colab environment.

## Steps Involved

1. **Setup Google Colab Environment**
   - Open Google Colab and create a new notebook.
   - Ensure necessary libraries are installed:
     ```python
     !pip install pandas scikit-learn seaborn matplotlib
     ```

2. **Data Collection**
   - Obtain a dataset containing water quality parameters (e.g., pH, turbidity, dissolved oxygen, etc.) and labels indicating drinkability (e.g., "Drinkable" or "Not Drinkable").
   - Load the dataset:
     ```python
     import pandas as pd

     data = pd.read_csv('path_to_water_quality_data.csv')
     ```

3. **Data Preprocessing**
   - Handle missing values, if any:
     ```python
     data.fillna(data.mean(), inplace=True)
     ```
   - Encode categorical variables (if present):
     ```python
     data['label'] = data['label'].map({'Drinkable': 1, 'Not Drinkable': 0})
     ```

4. **Exploratory Data Analysis (EDA)**
   - Visualize data distributions and correlations:
     ```python
     import seaborn as sns
     import matplotlib.pyplot as plt

     sns.pairplot(data, hue='label')
     plt.show()
     ```

5. **Sampling Techniques**
   - Use stratified sampling to ensure balanced classes:
     ```python
     from sklearn.model_selection import train_test_split

     X = data.drop('label', axis=1)
     y = data['label']
     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)
     ```

6. **Model Building with Random Forest**
   - Import and train the Random Forest model:
     ```python
     from sklearn.ensemble import RandomForestClassifier
     from sklearn.metrics import classification_report

     model = RandomForestClassifier(n_estimators=100, random_state=42)
     model.fit(X_train, y_train)
     ```

7. **Model Evaluation**
   - Evaluate the model's performance on the test set:
     ```python
     y_pred = model.predict(X_test)
     print(classification_report(y_test, y_pred))
     ```

8. **Probability of Drinkability**
   - Get prediction probabilities:
     ```python
     probabilities = model.predict_proba(X_test)[:, 1]
     ```

9. **Conclusion**
   - Summarize findings and the accuracy of the model.
   - Discuss potential improvements, such as hyperparameter tuning or using more complex models.

## Final Notes
- Ensure to document each step in the Colab notebook for clarity.
- Consider sharing the notebook for collaborative work or further analysis.
